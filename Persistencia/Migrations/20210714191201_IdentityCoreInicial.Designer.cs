// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

namespace Persistencia.Migrations
{
    [DbContext(typeof(CntContext))]
    [Migration("20210714191201_IdentityCoreInicial")]
    partial class IdentityCoreInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Dominio.Configuracion.CnfEmpresa", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdTerceroGerente")
                        .HasColumnType("int");

                    b.Property<string>("nit")
                        .HasColumnType("longtext");

                    b.Property<string>("razon_social")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnf_empresa");
                });

            modelBuilder.Entity("Dominio.Configuracion.CnfSucursal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<int>("id_empresa")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("id_empresa");

                    b.ToTable("cnf_sucursal");
                });

            modelBuilder.Entity("Dominio.Configuracion.CnfUsuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("usu_estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("usu_fecha_nacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("usu_password")
                        .HasColumnType("longtext");

                    b.Property<bool>("usu_supervisor")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("usu_usuario")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnf_usuario");
                });

            modelBuilder.Entity("Dominio.Configuracion.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("usu_estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("usu_supervisor")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntAno", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ano_ano")
                        .HasColumnType("int");

                    b.Property<bool>("ano_cerrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ano_estado")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_comprobante")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_comprobante");

                    b.HasIndex("id_usuario");

                    b.ToTable("cnt_ano");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntBanco", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_banco");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCategoriaComprobante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_categoriacomprobante");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCentroCosto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("cco_estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("cnt_centrocosto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCiiu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<int>("id_seccionciiu")
                        .HasColumnType("int");

                    b.Property<int>("id_tipociuu")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("id_seccionciiu");

                    b.HasIndex("id_tipociuu");

                    b.ToTable("cnt_ciiu");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntComprobante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cco_ano")
                        .HasColumnType("longtext");

                    b.Property<int>("cco_consecutivo")
                        .HasColumnType("int");

                    b.Property<string>("cco_detalle")
                        .HasColumnType("longtext");

                    b.Property<string>("cco_documento")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("cco_fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("cco_mes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_modulo")
                        .HasColumnType("int");

                    b.Property<int?>("id_reversion")
                        .HasColumnType("int");

                    b.Property<int>("id_sucursal")
                        .HasColumnType("int");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.Property<int>("id_tipocomprobante")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_sucursal");

                    b.HasIndex("id_tipocomprobante");

                    b.HasIndex("id_usuario");

                    b.ToTable("cnt_comprobante");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntConceptoCuenta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("estado")
                        .HasColumnType("longtext");

                    b.Property<int>("id_exogenaconcepto")
                        .HasColumnType("int");

                    b.Property<int>("id_formatocolumna")
                        .HasColumnType("int");

                    b.Property<int>("id_puc")
                        .HasColumnType("int");

                    b.Property<int>("id_tipooperacion")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("cnt_conceptocuenta");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntConsecutivo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("co_ano")
                        .HasColumnType("longtext");

                    b.Property<int>("co_consecutivo")
                        .HasColumnType("int");

                    b.Property<string>("co_mes")
                        .HasColumnType("longtext");

                    b.Property<int>("id_tipocomprobante")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_tipocomprobante");

                    b.ToTable("cnt_consecutivo");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCuentaImpuesto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("id_puc")
                        .HasColumnType("int");

                    b.Property<int>("id_tipoimpuesto")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_puc");

                    b.HasIndex("id_tipoimpuesto");

                    b.ToTable("cnt_cuentaimpuesto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntDepartamento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_departamento");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntDetalleComprobante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("dco_base")
                        .HasColumnType("double");

                    b.Property<double>("dco_credito")
                        .HasColumnType("double");

                    b.Property<double>("dco_debito")
                        .HasColumnType("double");

                    b.Property<string>("dco_detalle")
                        .HasColumnType("longtext");

                    b.Property<double>("dco_tarifa")
                        .HasColumnType("double");

                    b.Property<int>("id_centrocosto")
                        .HasColumnType("int");

                    b.Property<int>("id_comprobante")
                        .HasColumnType("int");

                    b.Property<int>("id_puc")
                        .HasColumnType("int");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_centrocosto");

                    b.HasIndex("id_comprobante");

                    b.HasIndex("id_puc");

                    b.ToTable("cnt_detallecomprobante");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntEntidad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.Property<int>("id_tipoimpuesto")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("IdTercero");

                    b.HasIndex("id_tipoimpuesto");

                    b.ToTable("cnt_entidad");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntExogenaConcepto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("estado")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_exogenaconcepto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntExogenaFormato", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_exogenaformato");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntFormatoColumna", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("fco_campo")
                        .HasColumnType("longtext");

                    b.Property<string>("fco_columna")
                        .HasColumnType("longtext");

                    b.Property<string>("fco_tipo")
                        .HasColumnType("longtext");

                    b.Property<int>("id_exogenaformato")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_exogenaformato");

                    b.ToTable("cnt_formatocolumna");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntFormatoConcepto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("id_exogenaconcepto")
                        .HasColumnType("int");

                    b.Property<int>("id_exogenaformato")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_exogenaconcepto");

                    b.HasIndex("id_exogenaformato");

                    b.ToTable("cnt_formatoconcepto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntGenero", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_genero");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntLiquidaImpuesto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_comprobante")
                        .HasColumnType("int");

                    b.Property<int>("id_puc")
                        .HasColumnType("int");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.Property<int>("id_tipoimpuesto")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<DateTime>("lim_fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("lim_fechafinal")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("lim_fechainicial")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_comprobante");

                    b.HasIndex("id_puc");

                    b.HasIndex("IdTercero");

                    b.HasIndex("id_tipoimpuesto");

                    b.HasIndex("id_usuario");

                    b.ToTable("cnt_liquidaimpuesto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntMes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<int>("mes_ano")
                        .HasColumnType("int");

                    b.Property<bool>("mes_cerrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("mes_mes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_usuario");

                    b.ToTable("cnt_mes");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntMunicipio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<int>("id_departamento")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("id_departamento");

                    b.ToTable("cnt_municipio");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_notaaclaratoriatipo")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<int>("nac_consecutivo")
                        .HasColumnType("int");

                    b.Property<string>("nac_detalle")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("nac_fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nac_titulo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_notaaclaratoriatipo");

                    b.ToTable("cnt_notaaclaratoria");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaCuenta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("id_notaaclaratoria")
                        .HasColumnType("int");

                    b.Property<int>("id_puc")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_notaaclaratoria");

                    b.HasIndex("id_puc");

                    b.ToTable("cnt_notaaclaratoriacuenta");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaTipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_notaaclaratoriatipo");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntPuc", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("id_puctipo")
                        .HasColumnType("int");

                    b.Property<int?>("id_tipocuenta")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<bool>("pac_activa")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pac_ajusteniif")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pac_base")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_puctipo");

                    b.HasIndex("id_tipocuenta");

                    b.HasIndex("id_usuario");

                    b.ToTable("cnt_puc");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntPucTipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("cnt_puctipo");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntRegimen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_regimen");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_responsabilidad");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidadTer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("id_responsabilidad")
                        .HasColumnType("int");

                    b.Property<int>("IdTercero")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_responsabilidad");

                    b.HasIndex("IdTercero");

                    b.ToTable("cnt_responsabilidad_ter");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntSeccionCiiu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_seccionciiu");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTercero", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_ciiu")
                        .HasColumnType("int");

                    b.Property<int>("id_genero")
                        .HasColumnType("int");

                    b.Property<int>("id_municipio")
                        .HasColumnType("int");

                    b.Property<int>("id_regimen")
                        .HasColumnType("int");

                    b.Property<int>("id_tipodocumento")
                        .HasColumnType("int");

                    b.Property<int>("id_tippersona")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<string>("ter_barrio")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_contacto_fe")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_digitoverificacion")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_documento")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_email")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_email_fe")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_priapellido")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_prinombre")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_razonsocial")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_segapellido")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_segnombre")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_telcelular")
                        .HasColumnType("longtext");

                    b.Property<string>("ter_telfijo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_ciiu");

                    b.HasIndex("id_genero");

                    b.HasIndex("id_municipio");

                    b.HasIndex("id_regimen");

                    b.HasIndex("id_tipodocumento");

                    b.HasIndex("id_tippersona");

                    b.ToTable("cnt_tercero");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoCiiu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_tipociiu");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoComprobante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("anulable")
                        .HasColumnType("longtext");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("editable")
                        .HasColumnType("longtext");

                    b.Property<int>("id_categoriacomprobante")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("tco_incremento")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("id_categoriacomprobante");

                    b.HasIndex("id_usuario");

                    b.ToTable("cnt_tipocomprobante");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoCuenta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_tipocuenta");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoDocumento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("codigo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("cnt_tipodocumento");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoImpuesto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_tipoimpuesto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoOperacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("formula")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_tipooperacion");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoPersona", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("cnt_tipopersona");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntUvt", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("uvt_ano")
                        .HasColumnType("int");

                    b.Property<double>("uvt_valor")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.ToTable("cnt_uvt");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dominio.Configuracion.CnfSucursal", b =>
                {
                    b.HasOne("Dominio.Configuracion.CnfEmpresa", "Empresa")
                        .WithMany("empresaSucursales")
                        .HasForeignKey("id_empresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntAno", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntComprobante", "comprobante")
                        .WithMany("comprobanteAnos")
                        .HasForeignKey("id_comprobante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Configuracion.CnfUsuario", "usuario")
                        .WithMany("usuarioAnos")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comprobante");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCiiu", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntSeccionCiiu", "ciiuSeccionCiiu")
                        .WithMany("seccionCiiuCiiu")
                        .HasForeignKey("id_seccionciiu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoCiiu", "ciiuTipoCiiu")
                        .WithMany("tipoCiiuCiiu")
                        .HasForeignKey("id_tipociuu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ciiuSeccionCiiu");

                    b.Navigation("ciiuTipoCiiu");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntComprobante", b =>
                {
                    b.HasOne("Dominio.Configuracion.CnfSucursal", "sucursal")
                        .WithMany("sucursalComprobantes")
                        .HasForeignKey("id_sucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoComprobante", "tipoComprobante")
                        .WithMany("ComprobantesTipoComprobante")
                        .HasForeignKey("id_tipocomprobante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Configuracion.CnfUsuario", "usuario")
                        .WithMany("usuarioComprobantes")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sucursal");

                    b.Navigation("tipoComprobante");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntConsecutivo", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntTipoComprobante", "TipoComprobante")
                        .WithMany("tipoComprobanteConsecutivos")
                        .HasForeignKey("id_tipocomprobante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoComprobante");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCuentaImpuesto", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntPuc", "puc")
                        .WithMany("pucCuentaImpuestos")
                        .HasForeignKey("id_puc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoImpuesto", "tipoImpuesto")
                        .WithMany("cntTipoImpuestoCntCuentaImpuestos")
                        .HasForeignKey("id_tipoimpuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("puc");

                    b.Navigation("tipoImpuesto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntDetalleComprobante", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntCentroCosto", "centroCosto")
                        .WithMany("centroCostoDetalleComprobantes")
                        .HasForeignKey("id_centrocosto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntComprobante", "comprobante")
                        .WithMany("comprobanteDetalleComprobantes")
                        .HasForeignKey("id_comprobante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntPuc", "puc")
                        .WithMany("pucDetalleComprobantes")
                        .HasForeignKey("id_puc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("centroCosto");

                    b.Navigation("comprobante");

                    b.Navigation("puc");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntEntidad", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntTercero", "tercero")
                        .WithMany("entidadTerceros")
                        .HasForeignKey("IdTercero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoImpuesto", "tipoImpuesto")
                        .WithMany("tipoImpuestoEntidades")
                        .HasForeignKey("id_tipoimpuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tercero");

                    b.Navigation("tipoImpuesto");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntFormatoColumna", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntExogenaFormato", "exogenaFormato")
                        .WithMany("exogenaFormatoFormatoColumnas")
                        .HasForeignKey("id_exogenaformato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exogenaFormato");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntFormatoConcepto", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntExogenaConcepto", "exogenaConcepto")
                        .WithMany("exogenaConceptoFormatoConceptos")
                        .HasForeignKey("id_exogenaconcepto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntExogenaFormato", "exogenaFormato")
                        .WithMany("exogenaFormatoFormatoConceptos")
                        .HasForeignKey("id_exogenaformato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exogenaConcepto");

                    b.Navigation("exogenaFormato");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntLiquidaImpuesto", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntComprobante", "comprobante")
                        .WithMany("comprobanteLiquidaImpuestos")
                        .HasForeignKey("id_comprobante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntPuc", "puc")
                        .WithMany("pucLiquidaImpuestos")
                        .HasForeignKey("id_puc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTercero", "tercero")
                        .WithMany("liquidaImpuestoTerceros")
                        .HasForeignKey("IdTercero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoImpuesto", "tipoImpuesto")
                        .WithMany("tipoImpuestoLiquidaImpuestos")
                        .HasForeignKey("id_tipoimpuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Configuracion.CnfUsuario", "usuario")
                        .WithMany("usuarioLiquidaImpuestos")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comprobante");

                    b.Navigation("puc");

                    b.Navigation("tercero");

                    b.Navigation("tipoImpuesto");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntMes", b =>
                {
                    b.HasOne("Dominio.Configuracion.CnfUsuario", "usuario")
                        .WithMany("usuarioMeses")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntMunicipio", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntDepartamento", "departamento")
                        .WithMany("departamentoMunicipios")
                        .HasForeignKey("id_departamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("departamento");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoria", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntNotaAclaratoriaTipo", "notaAclaratoriaTipo")
                        .WithMany("notaAclaratoriaTipoNotaAclaratorias")
                        .HasForeignKey("id_notaaclaratoriatipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("notaAclaratoriaTipo");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaCuenta", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntNotaAclaratoria", "cntNotaAclaratoria")
                        .WithMany("notaAclaratoriaNotaAclaratoriaCuentas")
                        .HasForeignKey("id_notaaclaratoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntPuc", "cntPuc")
                        .WithMany("pucNotaAclaratoriaCuentas")
                        .HasForeignKey("id_puc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cntNotaAclaratoria");

                    b.Navigation("cntPuc");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntPuc", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntPucTipo", "pucTipo")
                        .WithMany("cntPucTipoPucs")
                        .HasForeignKey("id_puctipo");

                    b.HasOne("Dominio.Contabilidad.CntTipoCuenta", "tipoCuenta")
                        .WithMany("TipoCuentaPucs")
                        .HasForeignKey("id_tipocuenta");

                    b.HasOne("Dominio.Configuracion.CnfUsuario", "usuario")
                        .WithMany("usuarioPucs")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pucTipo");

                    b.Navigation("tipoCuenta");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidadTer", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntResponsabilidad", "Responsabilidad")
                        .WithMany("reponsabilidadResponsabilidadTerceros")
                        .HasForeignKey("id_responsabilidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTercero", "Tercero")
                        .WithMany("responsabilidadTerceros")
                        .HasForeignKey("IdTercero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsabilidad");

                    b.Navigation("Tercero");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTercero", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntCiiu", "ciiu")
                        .WithMany("ciiuTerceros")
                        .HasForeignKey("id_ciiu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntGenero", "genero")
                        .WithMany("generoTerceros")
                        .HasForeignKey("id_genero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntMunicipio", "municipio")
                        .WithMany("municipioTerceros")
                        .HasForeignKey("id_municipio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntRegimen", "regimen")
                        .WithMany("regimenTerceros")
                        .HasForeignKey("id_regimen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoDocumento", "documentos")
                        .WithMany("documentoTerceros")
                        .HasForeignKey("id_tipodocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Contabilidad.CntTipoPersona", "tipoPersona")
                        .WithMany("tipoPersonaTercero")
                        .HasForeignKey("id_tippersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ciiu");

                    b.Navigation("documentos");

                    b.Navigation("genero");

                    b.Navigation("municipio");

                    b.Navigation("regimen");

                    b.Navigation("tipoPersona");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoComprobante", b =>
                {
                    b.HasOne("Dominio.Contabilidad.CntCategoriaComprobante", "categoria")
                        .WithMany("categoriaTipoComprobantes")
                        .HasForeignKey("id_categoriacomprobante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Configuracion.CnfUsuario", "usuario")
                        .WithMany("usuarioTipoComprobantes")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.Configuracion.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.Configuracion.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Configuracion.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.Configuracion.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Configuracion.CnfEmpresa", b =>
                {
                    b.Navigation("empresaSucursales");
                });

            modelBuilder.Entity("Dominio.Configuracion.CnfSucursal", b =>
                {
                    b.Navigation("sucursalComprobantes");
                });

            modelBuilder.Entity("Dominio.Configuracion.CnfUsuario", b =>
                {
                    b.Navigation("usuarioAnos");

                    b.Navigation("usuarioComprobantes");

                    b.Navigation("usuarioLiquidaImpuestos");

                    b.Navigation("usuarioMeses");

                    b.Navigation("usuarioPucs");

                    b.Navigation("usuarioTipoComprobantes");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCategoriaComprobante", b =>
                {
                    b.Navigation("categoriaTipoComprobantes");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCentroCosto", b =>
                {
                    b.Navigation("centroCostoDetalleComprobantes");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntCiiu", b =>
                {
                    b.Navigation("ciiuTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntComprobante", b =>
                {
                    b.Navigation("comprobanteAnos");

                    b.Navigation("comprobanteDetalleComprobantes");

                    b.Navigation("comprobanteLiquidaImpuestos");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntDepartamento", b =>
                {
                    b.Navigation("departamentoMunicipios");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntExogenaConcepto", b =>
                {
                    b.Navigation("exogenaConceptoFormatoConceptos");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntExogenaFormato", b =>
                {
                    b.Navigation("exogenaFormatoFormatoColumnas");

                    b.Navigation("exogenaFormatoFormatoConceptos");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntGenero", b =>
                {
                    b.Navigation("generoTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntMunicipio", b =>
                {
                    b.Navigation("municipioTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoria", b =>
                {
                    b.Navigation("notaAclaratoriaNotaAclaratoriaCuentas");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaTipo", b =>
                {
                    b.Navigation("notaAclaratoriaTipoNotaAclaratorias");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntPuc", b =>
                {
                    b.Navigation("pucCuentaImpuestos");

                    b.Navigation("pucDetalleComprobantes");

                    b.Navigation("pucLiquidaImpuestos");

                    b.Navigation("pucNotaAclaratoriaCuentas");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntPucTipo", b =>
                {
                    b.Navigation("cntPucTipoPucs");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntRegimen", b =>
                {
                    b.Navigation("regimenTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidad", b =>
                {
                    b.Navigation("reponsabilidadResponsabilidadTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntSeccionCiiu", b =>
                {
                    b.Navigation("seccionCiiuCiiu");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTercero", b =>
                {
                    b.Navigation("entidadTerceros");

                    b.Navigation("liquidaImpuestoTerceros");

                    b.Navigation("responsabilidadTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoCiiu", b =>
                {
                    b.Navigation("tipoCiiuCiiu");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoComprobante", b =>
                {
                    b.Navigation("ComprobantesTipoComprobante");

                    b.Navigation("tipoComprobanteConsecutivos");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoCuenta", b =>
                {
                    b.Navigation("TipoCuentaPucs");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoDocumento", b =>
                {
                    b.Navigation("documentoTerceros");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoImpuesto", b =>
                {
                    b.Navigation("cntTipoImpuestoCntCuentaImpuestos");

                    b.Navigation("tipoImpuestoEntidades");

                    b.Navigation("tipoImpuestoLiquidaImpuestos");
                });

            modelBuilder.Entity("Dominio.Contabilidad.CntTipoPersona", b =>
                {
                    b.Navigation("tipoPersonaTercero");
                });
#pragma warning restore 612, 618
        }
    }
}
