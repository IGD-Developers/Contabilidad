// <auto-generated />
using System;
using ContabilidadWebAPI.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContabilidadWebAPI.Persistencia.Migrations;

[DbContext(typeof(CntContext))]
partial class CntContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("Relational:MaxIdentifierLength", 64)
            .HasAnnotation("ProductVersion", "5.0.5");

        modelBuilder.Entity("Dominio.Configuracion.CnfEmpresa", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("IdTerceroGerente")
                    .HasColumnType("int");

                b.Property<string>("nit")
                    .HasColumnType("longtext");

                b.Property<string>("razon_social")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnf_empresa");
            });

        modelBuilder.Entity("Dominio.Configuracion.CnfSucursal", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<int>("id_empresa")
                    .HasColumnType("int");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("id_empresa");

                b.ToTable("cnf_sucursal");
            });

        modelBuilder.Entity("Dominio.Configuracion.CnfUsuario", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.Property<DateTime?>("update_at")
                    .HasColumnType("datetime(6)");

                b.Property<bool>("usu_estado")
                    .HasColumnType("tinyint(1)");

                b.Property<DateTime>("usu_fecha_nacimiento")
                    .HasColumnType("datetime(6)");

                b.Property<string>("usu_password")
                    .HasColumnType("longtext");

                b.Property<bool>("usu_supervisor")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("usu_usuario")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnf_usuario");
            });

        modelBuilder.Entity("Dominio.Configuracion.Usuario", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("varchar(255)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("longtext");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("tinyint(1)");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetime(6)");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("longtext");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("longtext");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("longtext");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.Property<DateTime?>("update_at")
                    .HasColumnType("datetime(6)");

                b.Property<bool>("usu_estado")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("usu_supervisor")
                    .HasColumnType("tinyint(1)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntAno", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("AnoAno")
                    .HasColumnType("int");

                b.Property<bool>("AnoCerrado")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("ano_estado")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdComprobante")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdComprobante");

                b.HasIndex("IdUsuario");

                b.ToTable("cnt_ano");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntBanco", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_banco");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCategoriaComprobante", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_categoriacomprobante");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCentroCosto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<bool>("cco_estado")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.ToTable("cnt_centrocosto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCiiu", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<int>("IdSeccionciiu")
                    .HasColumnType("int");

                b.Property<int>("IdTipociuu")
                    .HasColumnType("int");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("IdSeccionciiu");

                b.HasIndex("IdTipociuu");

                b.ToTable("cnt_ciiu");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntComprobante", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("CcoAno")
                    .HasColumnType("longtext");

                b.Property<int>("CcoConsecutivo")
                    .HasColumnType("int");

                b.Property<string>("CcoDetalle")
                    .HasColumnType("longtext");

                b.Property<string>("CcoDocumento")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("CcoFecha")
                    .HasColumnType("datetime(6)");

                b.Property<string>("CcoMes")
                    .HasColumnType("longtext");


                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdModulo")
                    .HasColumnType("int");

                b.Property<int?>("IdReversion")
                    .HasColumnType("int");

                b.Property<int>("IdSucursal")
                    .HasColumnType("int");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.Property<int>("IdTipocomprobante")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdSucursal");

                b.HasIndex("IdTipocomprobante");

                b.HasIndex("IdUsuario");

                b.ToTable("cnt_comprobante");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntConceptoCuenta", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Estado")
                    .HasColumnType("longtext");

                b.Property<int>("id_exogenaconcepto")
                    .HasColumnType("int");

                b.Property<int>("id_formatocolumna")
                    .HasColumnType("int");

                b.Property<int>("IdPuc")
                    .HasColumnType("int");

                b.Property<int>("id_tipooperacion")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("cnt_conceptocuenta");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntConsecutivo", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("CoAno")
                    .HasColumnType("longtext");

                b.Property<int>("CoConsecutivo")
                    .HasColumnType("int");

                b.Property<string>("CoMes")
                    .HasColumnType("longtext");

                b.Property<int>("IdTipocomprobante")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("IdTipocomprobante");

                b.ToTable("cnt_consecutivo");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCuentaImpuesto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("IdPuc")
                    .HasColumnType("int");

                b.Property<int>("IdTipoimpuesto")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("IdPuc");

                b.HasIndex("IdTipoimpuesto");

                b.ToTable("cnt_cuentaimpuesto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntDepartamento", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_departamento");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntDetalleComprobante", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<double>("DcoBase")
                    .HasColumnType("double");

                b.Property<double>("DcoCredito")
                    .HasColumnType("double");

                b.Property<double>("DcoDebito")
                    .HasColumnType("double");

                b.Property<string>("DcoDetalle")
                    .HasColumnType("longtext");

                b.Property<double>("DcoTarifa")
                    .HasColumnType("double");

                b.Property<int>("IdCentrocosto")
                    .HasColumnType("int");

                b.Property<int>("IdComprobante")
                    .HasColumnType("int");

                b.Property<int>("IdPuc")
                    .HasColumnType("int");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("IdCentrocosto");

                b.HasIndex("IdComprobante");

                b.HasIndex("IdPuc");

                b.ToTable("cnt_detallecomprobante");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntEntidad", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.Property<int>("IdTipoimpuesto")
                    .HasColumnType("int");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("IdTercero");

                b.HasIndex("IdTipoimpuesto");

                b.ToTable("cnt_entidad");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntExogenaConcepto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Estado")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_exogenaconcepto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntExogenaFormato", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_exogenaformato");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntFormatoColumna", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("fco_campo")
                    .HasColumnType("longtext");

                b.Property<string>("fco_columna")
                    .HasColumnType("longtext");

                b.Property<string>("fco_tipo")
                    .HasColumnType("longtext");

                b.Property<int>("id_exogenaformato")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("id_exogenaformato");

                b.ToTable("cnt_formatocolumna");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntFormatoConcepto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("id_exogenaconcepto")
                    .HasColumnType("int");

                b.Property<int>("id_exogenaformato")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("id_exogenaconcepto");

                b.HasIndex("id_exogenaformato");

                b.ToTable("cnt_formatoconcepto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntGenero", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_genero");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntLiquidaImpuesto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdComprobante")
                    .HasColumnType("int");

                b.Property<int>("IdPuc")
                    .HasColumnType("int");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.Property<int>("IdTipoimpuesto")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<DateTime>("LimFecha")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("LimFechafinal")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("LimFechainicial")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdComprobante");

                b.HasIndex("IdPuc");

                b.HasIndex("IdTercero");

                b.HasIndex("IdTipoimpuesto");

                b.HasIndex("IdUsuario");

                b.ToTable("cnt_liquidaimpuesto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntMes", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<int>("mes_ano")
                    .HasColumnType("int");

                b.Property<bool>("mes_cerrado")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("mes_mes")
                    .HasColumnType("int");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdUsuario");

                b.ToTable("cnt_mes");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntMunicipio", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<int>("IdDepartamento")
                    .HasColumnType("int");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("IdDepartamento");

                b.ToTable("cnt_municipio");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoria", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdNotaaclaratoriatipo")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<int>("NacConsecutivo")
                    .HasColumnType("int");

                b.Property<string>("NacDetalle")
                    .HasColumnType("longtext");

                b.Property<DateTime>("NacFecha")
                    .HasColumnType("datetime(6)");

                b.Property<string>("NacTitulo")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdNotaaclaratoriatipo");

                b.ToTable("cnt_notaaclaratoria");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaCuenta", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("id_notaaclaratoria")
                    .HasColumnType("int");

                b.Property<int>("IdPuc")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("id_notaaclaratoria");

                b.HasIndex("IdPuc");

                b.ToTable("cnt_notaaclaratoriacuenta");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaTipo", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_notaaclaratoriatipo");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntPuc", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int?>("IdPuctipo")
                    .HasColumnType("int");

                b.Property<int?>("IdTipocuenta")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.Property<bool>("PacActiva")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("PacAjusteniif")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("PacBase")
                    .HasColumnType("tinyint(1)");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdPuctipo");

                b.HasIndex("IdTipocuenta");

                b.HasIndex("IdUsuario");

                b.ToTable("cnt_puc");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntPucTipo", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.ToTable("cnt_puctipo");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntRegimen", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_regimen");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidad", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_responsabilidad");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidadTer", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("IdResponsabilidad")
                    .HasColumnType("int");

                b.Property<int>("IdTercero")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("IdResponsabilidad");

                b.HasIndex("IdTercero");

                b.ToTable("cnt_responsabilidad_ter");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntSeccionCiiu", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_seccionciiu");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTercero", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("IdCiiu")
                    .HasColumnType("int");

                b.Property<int>("IdGenero")
                    .HasColumnType("int");

                b.Property<int>("IdMunicipio")
                    .HasColumnType("int");

                b.Property<int>("IdRegimen")
                    .HasColumnType("int");

                b.Property<int>("IdTipodocumento")
                    .HasColumnType("int");

                b.Property<int>("IdTippersona")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<string>("TerBarrio")
                    .HasColumnType("longtext");

                b.Property<string>("TerContactoFe")
                    .HasColumnType("longtext");

                b.Property<string>("TerDigitoverificacion")
                    .HasColumnType("longtext");

                b.Property<string>("TerDireccion")
                    .HasColumnType("longtext");

                b.Property<string>("TerDocumento")
                    .HasColumnType("longtext");

                b.Property<string>("TerEmail")
                    .HasColumnType("longtext");

                b.Property<string>("TerEmailFe")
                    .HasColumnType("longtext");

                b.Property<string>("TerPriapellido")
                    .HasColumnType("longtext");

                b.Property<string>("TerPrinombre")
                    .HasColumnType("longtext");

                b.Property<string>("TerRazonsocial")
                    .HasColumnType("longtext");

                b.Property<string>("TerSegapellido")
                    .HasColumnType("longtext");

                b.Property<string>("TerSegnombre")
                    .HasColumnType("longtext");

                b.Property<string>("TerTelcelular")
                    .HasColumnType("longtext");

                b.Property<string>("TerTelfijo")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdCiiu");

                b.HasIndex("IdGenero");

                b.HasIndex("IdMunicipio");

                b.HasIndex("IdRegimen");

                b.HasIndex("IdTipodocumento");

                b.HasIndex("IdTippersona");

                b.ToTable("cnt_tercero");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoCiiu", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_tipociiu");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoComprobante", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Anulable")
                    .HasColumnType("longtext");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Editable")
                    .HasColumnType("longtext");

                b.Property<int>("IdCategoriacomprobante")
                    .HasColumnType("int");

                b.Property<int>("IdUsuario")
                    .HasColumnType("int");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.Property<string>("TcoIncremento")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("IdCategoriacomprobante");

                b.HasIndex("IdUsuario");

                b.ToTable("cnt_tipocomprobante");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoCuenta", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_tipocuenta");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoDocumento", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("Codigo")
                    .HasColumnType("int");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.Property<DateTime?>("update_at")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.ToTable("cnt_tipodocumento");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoImpuesto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_tipoimpuesto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoOperacion", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("formula")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_tipooperacion");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoPersona", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Codigo")
                    .HasColumnType("longtext");

                b.Property<string>("Nombre")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("cnt_tipopersona");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntUvt", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("uvt_ano")
                    .HasColumnType("int");

                b.Property<double>("uvt_valor")
                    .HasColumnType("double");

                b.HasKey("Id");

                b.ToTable("cnt_uvt");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("varchar(255)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("longtext");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("varchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("ClaimType")
                    .HasColumnType("longtext");

                b.Property<string>("ClaimValue")
                    .HasColumnType("longtext");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("ClaimType")
                    .HasColumnType("longtext");

                b.Property<string>("ClaimValue")
                    .HasColumnType("longtext");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("varchar(255)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("varchar(255)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("longtext");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("varchar(255)");

                b.Property<string>("RoleId")
                    .HasColumnType("varchar(255)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("varchar(255)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("varchar(255)");

                b.Property<string>("Name")
                    .HasColumnType("varchar(255)");

                b.Property<string>("Value")
                    .HasColumnType("longtext");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

        modelBuilder.Entity("Dominio.Configuracion.CnfSucursal", b =>
            {
                b.HasOne("Dominio.Configuracion.CnfEmpresa", "Empresa")
                    .WithMany("empresaSucursales")
                    .HasForeignKey("id_empresa")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Empresa");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntAno", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntComprobante", "Comprobante")
                    .WithMany("comprobanteAnos")
                    .HasForeignKey("IdComprobante")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Configuracion.CnfUsuario", "Usuario")
                    .WithMany("usuarioAnos")
                    .HasForeignKey("IdUsuario")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Comprobante");

                b.Navigation("Usuario");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCiiu", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntSeccionCiiu", "ciiuSeccionCiiu")
                    .WithMany("seccionCiiuCiiu")
                    .HasForeignKey("IdSeccionciiu")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoCiiu", "ciiuTipoCiiu")
                    .WithMany("tipoCiiuCiiu")
                    .HasForeignKey("IdTipociuu")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("ciiuSeccionCiiu");

                b.Navigation("ciiuTipoCiiu");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntComprobante", b =>
            {
                b.HasOne("Dominio.Configuracion.CnfSucursal", "Sucursal")
                    .WithMany("sucursalComprobantes")
                    .HasForeignKey("IdSucursal")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoComprobante", "TipoComprobante")
                    .WithMany("ComprobantesTipoComprobante")
                    .HasForeignKey("IdTipocomprobante")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Configuracion.CnfUsuario", "Usuario")
                    .WithMany("usuarioComprobantes")
                    .HasForeignKey("IdUsuario")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Sucursal");

                b.Navigation("TipoComprobante");

                b.Navigation("Usuario");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntConsecutivo", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntTipoComprobante", "TipoComprobante")
                    .WithMany("tipoComprobanteConsecutivos")
                    .HasForeignKey("IdTipocomprobante")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("TipoComprobante");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCuentaImpuesto", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntPuc", "puc")
                    .WithMany("pucCuentaImpuestos")
                    .HasForeignKey("IdPuc")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoImpuesto", "TipoImpuesto")
                    .WithMany("cntTipoImpuestoCntCuentaImpuestos")
                    .HasForeignKey("IdTipoimpuesto")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("puc");

                b.Navigation("TipoImpuesto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntDetalleComprobante", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntCentroCosto", "centroCosto")
                    .WithMany("centroCostoDetalleComprobantes")
                    .HasForeignKey("IdCentrocosto")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntComprobante", "Comprobante")
                    .WithMany("ComprobanteDetalleComprobantes")
                    .HasForeignKey("IdComprobante")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntPuc", "puc")
                    .WithMany("pucDetalleComprobantes")
                    .HasForeignKey("IdPuc")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("centroCosto");

                b.Navigation("Comprobante");

                b.Navigation("puc");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntEntidad", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntTercero", "Tercero")
                    .WithMany("entidadTerceros")
                    .HasForeignKey("IdTercero")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoImpuesto", "TipoImpuesto")
                    .WithMany("tipoImpuestoEntidades")
                    .HasForeignKey("IdTipoimpuesto")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Tercero");

                b.Navigation("TipoImpuesto");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntFormatoColumna", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntExogenaFormato", "exogenaFormato")
                    .WithMany("exogenaFormatoFormatoColumnas")
                    .HasForeignKey("id_exogenaformato")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("exogenaFormato");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntFormatoConcepto", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntExogenaConcepto", "exogenaConcepto")
                    .WithMany("exogenaConceptoFormatoConceptos")
                    .HasForeignKey("id_exogenaconcepto")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntExogenaFormato", "exogenaFormato")
                    .WithMany("exogenaFormatoFormatoConceptos")
                    .HasForeignKey("id_exogenaformato")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("exogenaConcepto");

                b.Navigation("exogenaFormato");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntLiquidaImpuesto", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntComprobante", "Comprobante")
                    .WithMany("comprobanteLiquidaImpuestos")
                    .HasForeignKey("IdComprobante")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntPuc", "puc")
                    .WithMany("pucLiquidaImpuestos")
                    .HasForeignKey("IdPuc")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTercero", "Tercero")
                    .WithMany("liquidaImpuestoTerceros")
                    .HasForeignKey("IdTercero")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoImpuesto", "TipoImpuesto")
                    .WithMany("tipoImpuestoLiquidaImpuestos")
                    .HasForeignKey("IdTipoimpuesto")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Configuracion.CnfUsuario", "Usuario")
                    .WithMany("usuarioLiquidaImpuestos")
                    .HasForeignKey("IdUsuario")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Comprobante");

                b.Navigation("puc");

                b.Navigation("Tercero");

                b.Navigation("TipoImpuesto");

                b.Navigation("Usuario");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntMes", b =>
            {
                b.HasOne("Dominio.Configuracion.CnfUsuario", "Usuario")
                    .WithMany("usuarioMeses")
                    .HasForeignKey("IdUsuario")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Usuario");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntMunicipio", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntDepartamento", "departamento")
                    .WithMany("departamentoMunicipios")
                    .HasForeignKey("IdDepartamento")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("departamento");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoria", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntNotaAclaratoriaTipo", "notaAclaratoriaTipo")
                    .WithMany("notaAclaratoriaTipoNotaAclaratorias")
                    .HasForeignKey("IdNotaaclaratoriatipo")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("notaAclaratoriaTipo");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaCuenta", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntNotaAclaratoria", "cntNotaAclaratoria")
                    .WithMany("notaAclaratoriaNotaAclaratoriaCuentas")
                    .HasForeignKey("id_notaaclaratoria")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntPuc", "cntPuc")
                    .WithMany("pucNotaAclaratoriaCuentas")
                    .HasForeignKey("IdPuc")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("cntNotaAclaratoria");

                b.Navigation("cntPuc");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntPuc", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntPucTipo", "PucTipo")
                    .WithMany("cntPucTipoPucs")
                    .HasForeignKey("IdPuctipo");

                b.HasOne("Dominio.Contabilidad.CntTipoCuenta", "TipoCuenta")
                    .WithMany("TipoCuentaPucs")
                    .HasForeignKey("IdTipocuenta");

                b.HasOne("Dominio.Configuracion.CnfUsuario", "Usuario")
                    .WithMany("usuarioPucs")
                    .HasForeignKey("IdUsuario")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("PucTipo");

                b.Navigation("TipoCuenta");

                b.Navigation("Usuario");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidadTer", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntResponsabilidad", "Responsabilidad")
                    .WithMany("reponsabilidadResponsabilidadTerceros")
                    .HasForeignKey("IdResponsabilidad")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTercero", "Tercero")
                    .WithMany("responsabilidadTerceros")
                    .HasForeignKey("IdTercero")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Responsabilidad");

                b.Navigation("Tercero");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTercero", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntCiiu", "ciiu")
                    .WithMany("ciiuTerceros")
                    .HasForeignKey("IdCiiu")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntGenero", "genero")
                    .WithMany("generoTerceros")
                    .HasForeignKey("IdGenero")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntMunicipio", "municipio")
                    .WithMany("municipioTerceros")
                    .HasForeignKey("IdMunicipio")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntRegimen", "regimen")
                    .WithMany("regimenTerceros")
                    .HasForeignKey("IdRegimen")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoDocumento", "documentos")
                    .WithMany("documentoTerceros")
                    .HasForeignKey("IdTipodocumento")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Contabilidad.CntTipoPersona", "tipoPersona")
                    .WithMany("tipoPersonaTercero")
                    .HasForeignKey("IdTippersona")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("ciiu");

                b.Navigation("documentos");

                b.Navigation("genero");

                b.Navigation("municipio");

                b.Navigation("regimen");

                b.Navigation("tipoPersona");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoComprobante", b =>
            {
                b.HasOne("Dominio.Contabilidad.CntCategoriaComprobante", "Categoria")
                    .WithMany("categoriaTipoComprobantes")
                    .HasForeignKey("IdCategoriacomprobante")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Configuracion.CnfUsuario", "Usuario")
                    .WithMany("usuarioTipoComprobantes")
                    .HasForeignKey("IdUsuario")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Categoria");

                b.Navigation("Usuario");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Dominio.Configuracion.Usuario", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Dominio.Configuracion.Usuario", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dominio.Configuracion.Usuario", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Dominio.Configuracion.Usuario", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Dominio.Configuracion.CnfEmpresa", b =>
            {
                b.Navigation("empresaSucursales");
            });

        modelBuilder.Entity("Dominio.Configuracion.CnfSucursal", b =>
            {
                b.Navigation("sucursalComprobantes");
            });

        modelBuilder.Entity("Dominio.Configuracion.CnfUsuario", b =>
            {
                b.Navigation("usuarioAnos");

                b.Navigation("usuarioComprobantes");

                b.Navigation("usuarioLiquidaImpuestos");

                b.Navigation("usuarioMeses");

                b.Navigation("usuarioPucs");

                b.Navigation("usuarioTipoComprobantes");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCategoriaComprobante", b =>
            {
                b.Navigation("categoriaTipoComprobantes");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCentroCosto", b =>
            {
                b.Navigation("centroCostoDetalleComprobantes");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntCiiu", b =>
            {
                b.Navigation("ciiuTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntComprobante", b =>
            {
                b.Navigation("comprobanteAnos");

                b.Navigation("ComprobanteDetalleComprobantes");

                b.Navigation("comprobanteLiquidaImpuestos");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntDepartamento", b =>
            {
                b.Navigation("departamentoMunicipios");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntExogenaConcepto", b =>
            {
                b.Navigation("exogenaConceptoFormatoConceptos");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntExogenaFormato", b =>
            {
                b.Navigation("exogenaFormatoFormatoColumnas");

                b.Navigation("exogenaFormatoFormatoConceptos");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntGenero", b =>
            {
                b.Navigation("generoTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntMunicipio", b =>
            {
                b.Navigation("municipioTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoria", b =>
            {
                b.Navigation("notaAclaratoriaNotaAclaratoriaCuentas");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntNotaAclaratoriaTipo", b =>
            {
                b.Navigation("notaAclaratoriaTipoNotaAclaratorias");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntPuc", b =>
            {
                b.Navigation("pucCuentaImpuestos");

                b.Navigation("pucDetalleComprobantes");

                b.Navigation("pucLiquidaImpuestos");

                b.Navigation("pucNotaAclaratoriaCuentas");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntPucTipo", b =>
            {
                b.Navigation("cntPucTipoPucs");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntRegimen", b =>
            {
                b.Navigation("regimenTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntResponsabilidad", b =>
            {
                b.Navigation("reponsabilidadResponsabilidadTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntSeccionCiiu", b =>
            {
                b.Navigation("seccionCiiuCiiu");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTercero", b =>
            {
                b.Navigation("entidadTerceros");

                b.Navigation("liquidaImpuestoTerceros");

                b.Navigation("responsabilidadTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoCiiu", b =>
            {
                b.Navigation("tipoCiiuCiiu");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoComprobante", b =>
            {
                b.Navigation("ComprobantesTipoComprobante");

                b.Navigation("tipoComprobanteConsecutivos");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoCuenta", b =>
            {
                b.Navigation("TipoCuentaPucs");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoDocumento", b =>
            {
                b.Navigation("documentoTerceros");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoImpuesto", b =>
            {
                b.Navigation("cntTipoImpuestoCntCuentaImpuestos");

                b.Navigation("tipoImpuestoEntidades");

                b.Navigation("tipoImpuestoLiquidaImpuestos");
            });

        modelBuilder.Entity("Dominio.Contabilidad.CntTipoPersona", b =>
            {
                b.Navigation("tipoPersonaTercero");
            });
#pragma warning restore 612, 618
    }
}
